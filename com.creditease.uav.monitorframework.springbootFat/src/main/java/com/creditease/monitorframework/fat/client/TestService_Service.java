package com.creditease.monitorframework.fat.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.5 2015-06-20T09:33:27.346+08:00 Generated source version: 2.6.5
 * 
 */
@WebServiceClient(name = "TestService", wsdlLocation = "http://localhost:8080/com.creditease.uav.monitorframework.buildFat/ws/TestService?wsdl", targetNamespace = "http://service.fat.monitorframework.creditease.com/")
public class TestService_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://service.fat.monitorframework.creditease.com/", "TestService");
    public final static QName TestServicePort = new QName("http://service.fat.monitorframework.creditease.com/",
            "TestServicePort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/com.creditease.uav.monitorframework.buildFat/ws/TestService?wsdl");
        }
        catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(TestService_Service.class.getName()).log(java.util.logging.Level.INFO,
                    "Can not initialize the default wsdl from {0}", "wsdl/TestService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public TestService_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TestService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TestService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }

    // This constructor requires JAX-WS API 2.2. You will need to endorse the
    // 2.2
    // API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
    // 2.1
    // compliant code instead.
    public TestService_Service(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    // This constructor requires JAX-WS API 2.2. You will need to endorse the
    // 2.2
    // API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
    // 2.1
    // compliant code instead.
    public TestService_Service(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE, features);
    }

    // This constructor requires JAX-WS API 2.2. You will need to endorse the
    // 2.2
    // API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
    // 2.1
    // compliant code instead.
    public TestService_Service(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return returns TestService
     */
    @WebEndpoint(name = "TestServicePort")
    public TestService getTestServicePort() {

        return super.getPort(TestServicePort, TestService.class);
    }

    /**
     * 
     * @param features
     *            A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in
     *            the <code>features</code> parameter will have their default values.
     * @return returns TestService
     */
    @WebEndpoint(name = "TestServicePort")
    public TestService getTestServicePort(WebServiceFeature... features) {

        return super.getPort(TestServicePort, TestService.class, features);
    }

}
